# Zephyr Android build pipeline
# Executes for commits to `v2` branch.

trigger:
  branches:
    include:
      - v2
  paths:
    include:
      - .azure/*
      - android/*

pr: none

pool:
  vmImage: 'macOS-10.13'

steps:
- task: DownloadSecureFile@1
  displayName: Fetch google-services.json
  inputs:
    secureFile: 'google-services.json'
- task: DownloadSecureFile@1
  displayName: Fetch keystore
  inputs:
    secureFile: 'android-keystore.jks'
- task: DownloadSecureFile@1
  displayName: Fetch keystore config
  inputs:
    secureFile: 'android-keystore.properties'
- task: CopyFiles@2
  displayName: Install google-services.json
  inputs:
    sourceFolder: '$(Agent.TempDirectory)'
    contents: 'google-services.json'
    targetFolder: 'android/app'
- task: CopyFiles@2
  displayName: Install keystore config
  inputs:
    sourceFolder: '$(Agent.TempDirectory)'
    contents: 'android-keystore.properties'
    targetFolder: 'android'
- task: CopyFiles@2
  displayName: Install keystore
  inputs:
    sourceFolder: '$(Agent.TempDirectory)'
    contents: 'android-keystore.jks'
    targetFolder: 'android/app'
- task: Gradle@2
  displayName: checkstyle
  inputs:
    workingDirectory: 'android'
    gradleWrapperFile: 'android/gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    tasks: 'checkstyle --info'
- task: Gradle@2
  displayName: pmd
  inputs:
    workingDirectory: 'android'
    gradleWrapperFile: 'android/gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    tasks: 'pmd --info'
- task: Gradle@2
  displayName: Build production
  inputs:
    workingDirectory: 'android'
    gradleWrapperFile: 'android/gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    tasks: 'assembleProduction'
- task: Gradle@2
  displayName: findbugs
  inputs:
    workingDirectory: 'android'
    gradleWrapperFile: 'android/gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    tasks: 'findbugs --info'
- task: Gradle@2
  displayName: Run tests
  inputs:
    workingDirectory: 'android'
    gradleWrapperFile: 'android/gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'testProductionReleaseUnitTest'
- task: CopyFiles@2
  displayName: Stage reports for publishing
  condition: always()
  inputs:
    contents: '**/reports/**'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
- task: PublishBuildArtifacts@1
  displayName: Publish reports
  condition: always()
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
    artifactName: Reports
- task: Bash@3
  displayName: Rename productionRelease APK
  condition: always()
  inputs:
    targetType: inline
    workingDirectory: 'android/app/build/outputs/apk/production/release'
    script: mv app-production-release.apk zephyr-$(Build.BuildNumber).apk
- task: CopyFiles@2
  displayName: Stage productionRelease APK for publishing
  condition: always()
  inputs:
    contents: 'android/app/build/outputs/apk/production/release/*.apk'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    flattenFolders: true
- task: PublishBuildArtifacts@1
  displayName: Publish productionRelease APK
  condition: always()
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
    artifactName: APK
- task: CopyFiles@2
  displayName: Stage Play Store metadata for publishing
  condition: always()
  inputs:
    contents: 'android/.play-store/**'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
- task: PublishBuildArtifacts@1
  displayName: Publish Play Store metadata
  condition: always()
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)
    artifactName: Play Store